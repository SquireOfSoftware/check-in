{"version":3,"sources":["logo.svg","components/ServerStates.js","components/Settings.js","components/StartButton.js","components/QrScanner.js","components/ScanLog.js","components/Report.js","App.js","reportWebVitals.js","index.js"],"names":["ServerStates","Object","freeze","UNCHECKED","name","UP","DOWN","CHECKING","Settings","props","changeDelayRate","event","delayRate","target","value","setState","changeCamera","camera","facingMode","changeServerSetting","serverSetting","setServerUp","serverGETState","setServerDown","verifyServerGETRequest","getRequest","XMLHttpRequest","addEventListener","status","console","error","open","state","serverUrl","setRequestHeader","send","log","initialCamera","initialDelayRate","initialServerSetting","bind","this","serverIsUp","serverIsDown","isOpen","className","icon","faCog","onChange","id","type","onClick","faSyncAlt","Component","StartButton","toggleButton","buttonEnabled","enabled","startCssName","startButtonCss","startButtonExitCss","modalOverlayCssName","modalOverlayCss","modalOverlayExitCss","onOpen","hideOverlay","hiddenCss","onAnimationEnd","defaultProps","QrScanner","handleError","handleScan","storedResult","scannedResult","timestamp","Date","scannedResults","scanExists","i","length","count","undefined","lastReadResult","push","addLog","processScan","opened","scanner","delay","onError","onScan","currentCamera","style","width","updateDelayRate","newDelayRate","updateCamera","newCamera","ScanLog","updateServerUrl","addScan","newScan","scanIsLegit","hash","Number","parseInt","scan","ScanStates","PROCESSING","scanTimestamp","performance","now","totalScans","has","existingScan","get","timeSinceLastSignIn","FAILED","signIn","scans","set","isNaN","signInRequest","checkinLog","JSON","parse","responseText","person","prevState","newScans","Map","SIGNED_IN","successfulScanCount","successLog","givenName","familyName","successLogs","unshift","addSuccessfulSignIn","stringify","personWord","logs","Report","total","scannedPeople","App","shift","serverLog","changedCamera","window","localStorage","setItem","changedDelayRate","changedServerSetting","serverState","setServerSettingUp","setServerSettingDown","getItem","nextScan","newUrl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06454d90.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const ServerStates = Object.freeze({\n  UNCHECKED: {\n    name: \"UNCHECKED\"\n  },\n  UP: {\n    name: \"UP\"\n  },\n  DOWN: {\n    name: \"DOWN\"\n  },\n  CHECKING: {\n    name: \"CHECKING\"\n  }\n});\n\nexport default ServerStates;","import React, {Component} from 'react';\nimport './Settings.css'\nimport { slide as Menu } from 'react-burger-menu'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog, faSyncAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport ServerStates from './ServerStates.js';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      facingMode: this.props.initialCamera,\n      delayRate: this.props.initialDelayRate,\n      serverUrl: this.props.initialServerSetting,\n      serverGETState: ServerStates.UNCHECKED\n    }\n    this.verifyServerGETRequest = this.verifyServerGETRequest.bind(this);\n\n    this.verifyServerGETRequest();\n  }\n\n  componentDidMount() {\n    this.props.serverIsUp(this.setServerUp);\n    this.props.serverIsDown(this.setServerDown)\n  }\n\n  changeDelayRate = (event) => {\n    let delayRate = event.target.value;\n    this.setState({\n      delayRate: delayRate\n    });\n    this.props.changeDelayRate(delayRate);\n  }\n\n  changeCamera = (event) => {\n    let camera = event.target.value;\n    this.setState({\n      facingMode: camera\n    });\n    this.props.changeCamera(camera);\n  }\n\n  changeServerSetting = (event) => {\n    let serverSetting = event.target.value;\n    this.setState({\n      serverSetting: serverSetting\n    });\n    this.props.changeServerSetting(serverSetting);\n  }\n\n  setServerUp = () => {\n    this.setState({\n      serverGETState: ServerStates.UP\n    });\n  }\n\n  setServerDown = () => {\n    this.setState({\n      serverGETState: ServerStates.DOWN\n    });\n  }\n\n  verifyServerGETRequest = () => {\n    this.setState({\n      serverGETState: ServerStates.CHECKING\n    });\n\n    let successGET = (event) => {\n      if (event.target.status === 200) {\n        this.setState({\n          serverGETState: ServerStates.UP\n        });\n      } else {\n        this.setState({\n          serverGETState: ServerStates.DOWN\n        });\n      }\n    }\n\n    let failedGET = (event) => {\n      console.error(\"An error occurred while checking the server health.\");\n      this.setState({\n        serverGETState: ServerStates.DOWN\n      });\n    }\n\n    let getRequest = new XMLHttpRequest();\n\n    getRequest.addEventListener(\"load\", successGET);\n    getRequest.addEventListener(\"error\", failedGET);\n\n    getRequest.open(\"GET\", this.state.serverUrl + \"/people-service/actuator/health\", true);\n    getRequest.setRequestHeader(\"Access-Control-Allow-Headers\", \"*\");\n    getRequest.setRequestHeader(\"Content-Type\", \"application/json\");\n    getRequest.send();\n\n    console.log(getRequest);\n  }\n\n  render() {\n    return (\n      <div>\n        <Menu isOpen={false}>\n          <div className=\"settings_header\">\n            <FontAwesomeIcon icon={faCog}/>\n            Settings\n          </div>\n          <div className=\"settings_body\">\n            <div className=\"camera_settings\">\n              <label>Camera</label>\n              <select\n                value={this.state.facingMode}\n                onChange={this.changeCamera}\n                id=\"camera_option\">\n                <option value=\"user\">User Camera</option>\n                <option value=\"environment\">Environment Camera</option>\n              </select>\n            </div>\n            <div className=\"scan_rate_settings\">\n              <label>Scan rate</label>\n              <input\n                id=\"delay_rate\"\n                type=\"number\"\n                value={this.state.delayRate}\n                onChange={this.changeDelayRate} />\n            </div>\n            <div className=\"server_settings\">\n              <label>Server name</label>\n              <input\n                id=\"server_setting\"\n                type=\"url\"\n                value={this.state.serverUrl}\n                onChange={this.changeServerSetting} />\n            </div>\n            <div onClick={() => this.verifyServerGETRequest()}>\n              Server is: {this.state.serverGETState.name}\n              <FontAwesomeIcon icon={faSyncAlt}/>\n            </div>\n          </div>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default Settings;","import React, {Component} from 'react';\nimport './StartButton.css'\n\nclass StartButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      enabled: true,\n      startCssName: props.startButtonCss,\n      modalOverlayCssName: props.modalOverlayCss\n    }\n  }\n\n  toggleButton = (event) => {\n    let buttonEnabled = !this.state.enabled;\n    this.setState({\n      enabled: buttonEnabled,\n      startCssName: this.props.startButtonCss + (buttonEnabled ? \"\" : \" \" + this.props.startButtonExitCss),\n      modalOverlayCssName: this.props.modalOverlayCss + (buttonEnabled ? \"\" : \" \" + this.props.modalOverlayExitCss)\n    });\n    this.props.onOpen();\n  }\n\n  hideOverlay = (event) => {\n    this.setState({\n      modalOverlayCssName: this.props.hiddenCss\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={this.state.modalOverlayCssName}\n            onAnimationEnd={this.hideOverlay}>\n          <div className={this.state.startCssName}\n              onClick={this.toggleButton}>\n            START\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nStartButton.defaultProps = {\n  startButtonCss: 'startButton',\n  modalOverlayCss: 'modalOverlay',\n  hiddenCss: 'hidden',\n  startButtonExitCss: 'startButtonExit',\n  modalOverlayExitCss: 'modalOverlayExit'\n}\n\nexport default StartButton;","import React, {Component} from 'react';\nimport './QrScanner.css'\n\nimport QrReader from 'react-qr-reader'\nimport StartButton from './StartButton.js'\n\nclass QrScanner extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        lastReadResult: \"Test\",\n        opened: false,\n        scannedResults: [],\n        currentCamera: this.props.currentCamera,\n        delayRate: this.props.delayRate\n      };\n      this.updateDelayRate = this.updateDelayRate.bind(this);\n      this.updateCamera = this.updateCamera.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.updateDelayRate(this.updateDelayRate);\n    this.props.updateCamera(this.updateCamera)\n  }\n\n  handleError = (event) => {\n//    console.log(event);\n  }\n\n  handleScan = (event) => {\n    // log the scan attempt\n//    console.log(event);\n    let scannedResult = {\n      value: event,\n      timestamp: new Date()\n    };\n\n    let scannedResults = this.state.scannedResults;\n    let scanExists = false;\n    let storedResult;\n    for (let i = 0; i < scannedResults.length; i++) {\n      storedResult = scannedResults[i];\n      if (storedResult.value === scannedResult.value) {\n        storedResult.count = storedResult.count !== undefined ?\n          storedResult.count + 1 : 0;\n        scanExists = true;\n        break;\n      }\n    }\n\n    this.setState({\n      lastReadResult: event\n    });\n\n    if (scanExists) {\n      // do nothing\n    } else {\n      // add the scan to the array\n      scannedResults.push(scannedResult);\n      this.setState({\n        scannedResults: scannedResults\n      });\n    }\n\n    if (event !== null && event !== undefined) {\n      this.props.addLog(\"Scanned in: \" + event);\n      // process the scan\n      this.props.processScan(event);\n    }\n  }\n\n  onOpen = () => {\n    this.setState({\n      opened: true,\n      scanner: <QrReader\n                  delay={this.state.delayRate}\n                  onError={this.handleError}\n                  onScan={this.handleScan}\n                  facingMode={this.state.currentCamera}\n                  style={{ width: '500px'}}\n                />\n    });\n    // for some strange reason the qr camera is not redrawn\n  }\n\n  updateDelayRate = (newDelayRate) => {\n    if (this.state.opened) {\n      this.setState({\n        delayRate: newDelayRate,\n        scanner: <QrReader\n                    delay={newDelayRate}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    facingMode={this.state.currentCamera}\n                    style={{ width: '500px'}}\n                  />\n      });\n    }\n  }\n\n  updateCamera = (newCamera) => {\n    if (this.state.opened) {\n      this.setState({\n        currentCamera: newCamera,\n        scanner: <QrReader\n                    delay={this.state.delayRate}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    facingMode={newCamera}\n                    style={{ width: '500px'}}\n                  />\n      });\n    }\n  }\n\n  render() {\n//    console.log(\"redrawing scanner\");\n    return (\n      <div>\n        <div className=\"scanner\">\n          <div className=\"scanner_container\">\n            {this.state.scanner}\n          </div>\n        </div>\n        <StartButton onOpen={this.onOpen} />\n      </div>\n    )\n  }\n}\n\nexport default QrScanner;","import React, {Component} from 'react';\nimport './ScanLog.css'\n\nclass ScanLog extends Component {\n  constructor(props) {\n    super(props);\n\n    // for a single scan we want to first store it\n    // the scan has a state of: processing, rejected, signedin\n    // this will be a hashmap of the hash, with the timestamp and the result\n    // the scan will happen quickly so this needs to be a fast look up\n    this.state = {\n      successfulScanCount: 0,\n      totalScans: new Map(),\n      serverUrl: this.props.initialServerSetting,\n      successLogs: []\n    }\n    this.addScan = this.addScan.bind(this);\n    this.updateServerUrl = this.updateServerUrl.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.scanIsLegit = this.scanIsLegit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.processScan(this.addScan);\n    this.props.updateServerUrl(this.updateServerUrl)\n  }\n\n  updateServerUrl = (serverUrl) => {\n    this.setState({\n      serverUrl: serverUrl\n    })\n  }\n\n  addScan = (newScan) => {\n    // scan should just be a number\n    // we add the timestamp when we add it into the state\n    if (this.scanIsLegit(newScan)) {\n      let hash = Number.parseInt(newScan);\n      let scan = {\n        hash: hash,\n        state: ScanStates.PROCESSING,\n        scanTimestamp: performance.now()\n      }\n\n      if (!this.state.totalScans.has(hash)) {\n        let scans = this.state.totalScans;\n        scans.set(hash, scan);\n        this.setState({\n          totalScans: scans\n        });\n//        console.log(scan);\n        this.signIn(hash);\n      } else {\n        let existingScan = this.state.totalScans.get(hash);\n        let timeSinceLastSignIn = performance.now() - existingScan.scanTimestamp;\n        if (existingScan.state === ScanStates.FAILED) {\n          // then we want to try again\n          this.signIn(hash);\n        } else if (timeSinceLastSignIn > 300000) {\n          // if 5 mins (300,000ms) have passed\n          // sign the person in again\n          // as most likely its a \"new\" session\n          this.signIn(hash);\n        }\n      }\n    }\n  }\n\n  scanIsLegit = (newScan) => {\n    return newScan !== undefined &&\n      newScan !== null &&\n      !Number.isNaN(Number.parseInt(newScan));\n  }\n\n  signIn = (hash) => {\n    let signInComplete = (event) => {\n      if (event.target.status === 200) {\n        let checkinLog = JSON.parse(event.target.responseText);\n//        console.log(checkinLog);\n        let person = checkinLog.person;\n        this.setState(prevState => {\n          const newScans = new Map(prevState.totalScans);\n          const scan = {\n            ...newScans.get(hash),\n            state: ScanStates.SIGNED_IN\n          }\n          return {\n            totalScans: newScans.set(hash, scan)\n          }\n        });\n        let successfulScanCount = this.state.successfulScanCount + 1;\n        let successLog = person.givenName + \" \" + person.familyName + \" has just been signed in.\";\n        let successLogs = this.state.successLogs;\n        successLogs.unshift(successLog);\n        this.setState({\n          successLogs: successLogs,\n          successfulScanCount: successfulScanCount\n        });\n        this.props.addLog(successLog);\n        this.props.addSuccessfulSignIn(checkinLog);\n      } else {\n        this.setState(prevState => {\n          const newScans = new Map(prevState.totalScans);\n          const scan = {\n            ...newScans.get(hash),\n            state: ScanStates.FAILED,\n            scanTimestamp: performance.now()\n          }\n          return {\n            totalScans: newScans.set(hash, scan)\n          }\n        });\n        let scan = this.state.totalScans.get(hash);\n      }\n      this.props.serverIsUp();\n    }\n\n    let signInFailed = (event) => {\n      console.error(\"An error occurred while signing in the person.\");\n      this.setState(prevState => {\n        const newScans = new Map(prevState.totalScans);\n        const scan = {\n          ...newScans.get(hash),\n          state: ScanStates.FAILED,\n          scanTimestamp: performance.now()\n        }\n        return {\n          totalScans: newScans.set(hash, scan)\n        }\n      });\n      this.props.serverIsDown();\n    }\n\n    let signInRequest = new XMLHttpRequest();\n\n    signInRequest.addEventListener(\"load\", signInComplete);\n    signInRequest.addEventListener(\"error\", signInFailed);\n\n    signInRequest.open(\"POST\", this.state.serverUrl + \"/people-service/checkin/signin\", true);\n    signInRequest.setRequestHeader(\"Access-Control-Allow-Headers\", \"*\");\n    signInRequest.setRequestHeader(\"Content-Type\", \"application/json\");\n    signInRequest.send(JSON.stringify({\"hash\": hash, \"message\": \"signing in today again\"}));\n\n    console.log(signInRequest);\n  }\n\n  render() {\n    let logs = [];\n    for (let i = 0; i < this.props.logs.length; i++) {\n      let log = this.props.logs[i];\n      if (log === null) {\n        log = \"null\";\n      }\n      logs.unshift(<div key={i}>{log}</div>);\n    }\n\n    let personWord;\n    if (this.state.successfulScanCount === 1) {\n      personWord = \"person\";\n    } else {\n      personWord = \"people\";\n    }\n\n    return (\n      <div>\n        <div>\n          <div className=\"scanCount\">\n            {this.state.successfulScanCount}\n          </div>\n          <div className=\"scanCountText\">\n            {personWord} signed in.\n          </div>\n        </div>\n        {logs}\n      </div>\n    )\n  }\n}\n\nconst ScanStates = Object.freeze({\n  PROCESSING: {\n    name: \"PROCESSING\"\n  },\n  SIGNED_IN: {\n    name: \"SIGNED_IN\"\n  },\n  FAILED: {\n    name: \"FAILED\"\n  }\n});\n\nexport default ScanLog;","import React, {Component} from 'react';\n\nclass Report extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      scannedPeople: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        Report\n      </div>\n    )\n  }\n}\n\nexport default Report;","import React, {Component} from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Settings from './components/Settings.js';\nimport QrScanner from './components/QrScanner.js';\nimport ScanLog from './components/ScanLog.js';\nimport Report from './components/Report.js';\nimport ServerStates from './components/ServerStates.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let currentCamera = window.localStorage.getItem('qrCamera');\n    if (currentCamera === undefined || currentCamera === null) {\n      currentCamera = this.props.currentCamera;\n    }\n\n    let delayRate = window.localStorage.getItem('qrDelayRate');\n    if (delayRate === undefined || delayRate === null) {\n      delayRate = this.props.delayRate;\n    }\n    delayRate = parseInt(delayRate);\n\n    let serverSetting = window.localStorage.getItem('serverSetting');\n    if (serverSetting === undefined || serverSetting === null) {\n      serverSetting = this.props.serverSetting;\n    }\n\n    this.state = {\n      logs: [],\n      currentCamera: currentCamera,\n      delayRate: delayRate,\n      serverSetting: serverSetting,\n      nextScan: null,\n      serverState: ServerStates.UNCHECKED\n    }\n\n    this.addLog = this.addLog.bind(this);\n    this.changeCamera = this.changeCamera.bind(this);\n    this.changeDelayRate = this.changeDelayRate.bind(this);\n    this.changeServerSetting = this.changeServerSetting.bind(this);\n//    this.processScan = this.processScan.bind(this);\n  }\n\n  addLog = (log) => {\n    let logs = this.state.logs;\n    logs.push(log);\n    if (logs.length > 10) {\n      logs.shift();\n    }\n\n//    console.log(logs);\n\n    this.setState({\n      logs: logs\n    });\n  }\n\n  addSuccessfulSignIn = (serverLog) => {\n\n  }\n\n  changeCamera = (changedCamera) => {\n    this.setState({\n      currentCamera: changedCamera\n    });\n    window.localStorage.setItem(\"qrCamera\", changedCamera);\n    this.updateCamera(changedCamera);\n  }\n\n  changeDelayRate = (changedDelayRate) => {\n    this.setState({\n      delayRate: changedDelayRate\n    });\n    window.localStorage.setItem(\"qrDelayRate\", changedDelayRate);\n    this.updateDelayRate(changedDelayRate);\n  }\n\n  changeServerSetting = (changedServerSetting) => {\n    this.setState({\n      serverSetting: changedServerSetting\n    });\n    window.localStorage.setItem(\"serverSetting\", changedServerSetting);\n    this.updateServerUrl(changedServerSetting);\n  }\n\n  serverIsUp = () => {\n    this.setState({\n      serverState: ServerStates.UP\n    });\n    this.setServerSettingUp();\n  }\n\n  serverIsDown = () => {\n    this.setState({\n      serverState: ServerStates.DOWN\n    });\n    this.setServerSettingDown();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Settings initialCamera={this.state.currentCamera}\n                    initialDelayRate={this.state.delayRate}\n                    initialServerSetting={this.state.serverSetting}\n                    changeCamera={this.changeCamera}\n                    changeDelayRate={this.changeDelayRate}\n                    changeServerSetting={this.changeServerSetting}\n                    serverIsDown={serverIsDown => this.setServerSettingDown = serverIsDown}\n                    serverIsUp={serverIsUp => this.setServerSettingUp = serverIsUp}/>\n          <QrScanner addLog={this.addLog}\n                      currentCamera={this.state.currentCamera}\n                      delayRate={this.state.delayRate}\n                      processScan={this.processScan}\n                      updateDelayRate={newDelayRate => this.updateDelayRate = newDelayRate}\n                      updateCamera={newCamera => this.updateCamera = newCamera}/>\n          <ScanLog logs={this.state.logs}\n                    initialServerSetting={this.state.serverSetting}\n                    processScan={newScan => this.processScan = newScan}\n                    updateServerUrl={newUrl => this.updateServerUrl = newUrl}\n                    addLog={this.addLog}\n                    addSuccessfulSignIn={this.addSuccessfulSignIn}\n                    serverIsUp={this.serverIsUp}\n                    serverIsDown={this.serverIsDown}\n                    />\n          <Report />\n        </header>\n      </div>\n    );\n  }\n}\n\nApp.defaultProps = {\n currentCamera: 'environment',\n delayRate: 300,\n serverSetting: 'https://localhost:8000'\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}