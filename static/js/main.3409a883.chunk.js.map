{"version":3,"sources":["logo.svg","components/Settings.js","components/StartButton.js","components/QrScanner.js","components/ScanLog.js","components/Report.js","App.js","reportWebVitals.js","index.js"],"names":["Settings","props","changeDelayRate","event","delayRate","target","value","setState","changeCamera","camera","facingMode","changeServerSetting","serverSetting","state","initialCamera","initialDelayRate","initialServerSetting","isOpen","className","icon","faCog","this","onChange","id","type","Component","StartButton","toggleButton","buttonEnabled","enabled","startCssName","startButtonCss","startButtonExitCss","modalOverlayCssName","modalOverlayCss","modalOverlayExitCss","onOpen","hideOverlay","hiddenCss","onAnimationEnd","onClick","defaultProps","QrScanner","handleError","handleScan","storedResult","scannedResult","timestamp","Date","scannedResults","scanExists","i","length","count","undefined","lastReadResult","push","addLog","processScan","opened","scanner","delay","onError","onScan","currentCamera","style","width","updateDelayRate","newDelayRate","updateCamera","newCamera","bind","ScanLog","updateServerUrl","serverUrl","addScan","newScan","scanIsLegit","hash","Number","parseInt","scan","ScanStates","PROCESSING","scanTimestamp","performance","now","totalScans","has","existingScan","get","timeSinceLastSignIn","FAILED","signIn","scans","set","isNaN","signInRequest","XMLHttpRequest","addEventListener","status","successfulScanCount","checkinLog","JSON","parse","responseText","person","prevState","newScans","Map","SIGNED_IN","givenName","addSuccessfulSignIn","console","log","error","open","setRequestHeader","send","stringify","personWord","logs","Object","freeze","name","Report","total","scannedPeople","App","shift","serverLog","changedCamera","window","localStorage","setItem","changedDelayRate","changedServerSetting","getItem","nextScan","newUrl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3409a883.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\nimport './Settings.css'\nimport { slide as Menu } from 'react-burger-menu'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      facingMode: this.props.initialCamera,\n      delayRate: this.props.initialDelayRate,\n      serverSetting: this.props.initialServerSetting\n    }\n  }\n\n  changeDelayRate = (event) => {\n    let delayRate = event.target.value;\n    this.setState({\n      delayRate: delayRate\n    });\n    this.props.changeDelayRate(delayRate);\n  }\n\n  changeCamera = (event) => {\n    let camera = event.target.value;\n    this.setState({\n      facingMode: camera\n    });\n    this.props.changeCamera(camera);\n  }\n\n  changeServerSetting = (event) => {\n    let serverSetting = event.target.value;\n    this.setState({\n      serverSetting: serverSetting\n    });\n    this.props.changeServerSetting(serverSetting);\n  }\n\n  render() {\n    return (\n      <div>\n        <Menu isOpen={false}>\n          <div className=\"settings_header\">\n            <FontAwesomeIcon icon={faCog}/>\n            Settings\n          </div>\n          <div className=\"settings_body\">\n            <div className=\"camera_settings\">\n              <label>Camera</label>\n              <select\n                value={this.state.facingMode}\n                onChange={this.changeCamera}\n                id=\"camera_option\">\n                <option value=\"user\">User Camera</option>\n                <option value=\"environment\">Environment Camera</option>\n              </select>\n            </div>\n            <div className=\"scan_rate_settings\">\n              <label>Scan rate</label>\n              <input\n                id=\"delay_rate\"\n                type=\"number\"\n                value={this.state.delayRate}\n                onChange={this.changeDelayRate} />\n            </div>\n            <div className=\"server_settings\">\n              <label>Server name</label>\n              <input\n                id=\"server_setting\"\n                type=\"url\"\n                value={this.state.serverSetting}\n                onChange={this.changeServerSetting} />\n            </div>\n          </div>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default Settings;","import React, {Component} from 'react';\nimport './StartButton.css'\n\nclass StartButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      enabled: true,\n      startCssName: props.startButtonCss,\n      modalOverlayCssName: props.modalOverlayCss\n    }\n  }\n\n  toggleButton = (event) => {\n    let buttonEnabled = !this.state.enabled;\n    this.setState({\n      enabled: buttonEnabled,\n      startCssName: this.props.startButtonCss + (buttonEnabled ? \"\" : \" \" + this.props.startButtonExitCss),\n      modalOverlayCssName: this.props.modalOverlayCss + (buttonEnabled ? \"\" : \" \" + this.props.modalOverlayExitCss)\n    });\n    this.props.onOpen();\n  }\n\n  hideOverlay = (event) => {\n    this.setState({\n      modalOverlayCssName: this.props.hiddenCss\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={this.state.modalOverlayCssName}\n            onAnimationEnd={this.hideOverlay}>\n          <div className={this.state.startCssName}\n              onClick={this.toggleButton}>\n            START\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nStartButton.defaultProps = {\n  startButtonCss: 'startButton',\n  modalOverlayCss: 'modalOverlay',\n  hiddenCss: 'hidden',\n  startButtonExitCss: 'startButtonExit',\n  modalOverlayExitCss: 'modalOverlayExit'\n}\n\nexport default StartButton;","import React, {Component} from 'react';\nimport './QrScanner.css'\n\nimport QrReader from 'react-qr-reader'\nimport StartButton from './StartButton.js'\n\nclass QrScanner extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        lastReadResult: \"Test\",\n        opened: false,\n        scannedResults: [],\n        currentCamera: this.props.currentCamera,\n        delayRate: this.props.delayRate\n      };\n      this.updateDelayRate = this.updateDelayRate.bind(this);\n      this.updateCamera = this.updateCamera.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.updateDelayRate(this.updateDelayRate);\n    this.props.updateCamera(this.updateCamera)\n  }\n\n  handleError = (event) => {\n//    console.log(event);\n  }\n\n  handleScan = (event) => {\n    // log the scan attempt\n//    console.log(event);\n    let scannedResult = {\n      value: event,\n      timestamp: new Date()\n    };\n\n    let scannedResults = this.state.scannedResults;\n    let scanExists = false;\n    let storedResult;\n    for (let i = 0; i < scannedResults.length; i++) {\n      storedResult = scannedResults[i];\n      if (storedResult.value === scannedResult.value) {\n        storedResult.count = storedResult.count !== undefined ?\n          storedResult.count + 1 : 0;\n        scanExists = true;\n        break;\n      }\n    }\n\n    this.setState({\n      lastReadResult: event\n    });\n\n    if (scanExists) {\n      // do nothing\n    } else {\n      // add the scan to the array\n      scannedResults.push(scannedResult);\n      this.setState({\n        scannedResults: scannedResults\n      });\n    }\n\n    if (event !== null && event !== undefined) {\n      this.props.addLog(\"Scanned in: \" + event);\n      // process the scan\n      this.props.processScan(event);\n    }\n  }\n\n  onOpen = () => {\n    this.setState({\n      opened: true,\n      scanner: <QrReader\n                  delay={this.state.delayRate}\n                  onError={this.handleError}\n                  onScan={this.handleScan}\n                  facingMode={this.state.currentCamera}\n                  style={{ width: '500px'}}\n                />\n    });\n    // for some strange reason the qr camera is not redrawn\n  }\n\n  updateDelayRate = (newDelayRate) => {\n    if (this.state.opened) {\n      this.setState({\n        delayRate: newDelayRate,\n        scanner: <QrReader\n                    delay={newDelayRate}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    facingMode={this.state.currentCamera}\n                    style={{ width: '500px'}}\n                  />\n      });\n    }\n  }\n\n  updateCamera = (newCamera) => {\n    if (this.state.opened) {\n      this.setState({\n        currentCamera: newCamera,\n        scanner: <QrReader\n                    delay={this.state.delayRate}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    facingMode={newCamera}\n                    style={{ width: '500px'}}\n                  />\n      });\n    }\n  }\n\n  render() {\n//    console.log(\"redrawing scanner\");\n    return (\n      <div>\n        <div className=\"scanner\">\n          <div className=\"scanner_container\">\n            {this.state.scanner}\n          </div>\n        </div>\n        <StartButton onOpen={this.onOpen} />\n      </div>\n    )\n  }\n}\n\nexport default QrScanner;","import React, {Component} from 'react';\nimport './ScanLog.css'\n\nclass ScanLog extends Component {\n  constructor(props) {\n    super(props);\n\n    // for a single scan we want to first store it\n    // the scan has a state of: processing, rejected, signedin\n    // this will be a hashmap of the hash, with the timestamp and the result\n    // the scan will happen quickly so this needs to be a fast look up\n    this.state = {\n      successfulScanCount: 0,\n      totalScans: new Map(),\n      serverUrl: this.props.initialServerSetting\n    }\n    this.addScan = this.addScan.bind(this);\n    this.updateServerUrl = this.updateServerUrl.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.scanIsLegit = this.scanIsLegit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.processScan(this.addScan);\n    this.props.updateServerUrl(this.updateServerUrl)\n  }\n\n  updateServerUrl = (serverUrl) => {\n    this.setState({\n      serverUrl: serverUrl\n    })\n  }\n\n  addScan = (newScan) => {\n    // scan should just be a number\n    // we add the timestamp when we add it into the state\n    if (this.scanIsLegit(newScan)) {\n      let hash = Number.parseInt(newScan);\n      let scan = {\n        hash: hash,\n        state: ScanStates.PROCESSING,\n        scanTimestamp: performance.now()\n      }\n\n      if (!this.state.totalScans.has(hash)) {\n        let scans = this.state.totalScans;\n        scans.set(hash, scan);\n        this.setState({\n          totalScans: scans\n        });\n//        console.log(scan);\n        this.signIn(hash);\n      } else {\n        let existingScan = this.state.totalScans.get(hash);\n        let timeSinceLastSignIn = performance.now() - existingScan.scanTimestamp;\n        if (existingScan.state === ScanStates.FAILED) {\n          // then we want to try again\n          this.signIn(hash);\n        } else if (timeSinceLastSignIn > 300000) {\n          // if 5 mins (300,000ms) have passed\n          // sign the person in again\n          // as most likely its a \"new\" session\n          this.signIn(hash);\n        }\n      }\n    }\n  }\n\n  scanIsLegit = (newScan) => {\n    return newScan !== undefined &&\n      newScan !== null &&\n      !Number.isNaN(Number.parseInt(newScan));\n  }\n\n  signIn = (hash) => {\n    let signInComplete = (event) => {\n      if (event.target.status === 200) {\n        let successfulScanCount = this.state.successfulScanCount + 1;\n        this.setState({\n          successfulScanCount: successfulScanCount\n        });\n        let checkinLog = JSON.parse(event.target.responseText);\n//        console.log(checkinLog);\n        let person = checkinLog.person;\n        this.setState(prevState => {\n          const newScans = new Map(prevState.totalScans);\n          const scan = {\n            ...newScans.get(hash),\n            state: ScanStates.SIGNED_IN\n          }\n          return {\n            totalScans: newScans.set(hash, scan)\n          }\n        });\n\n        this.props.addLog(person.givenName + \" has just been signed in.\");\n        this.props.addSuccessfulSignIn(checkinLog);\n      } else {\n        this.setState(prevState => {\n          const newScans = new Map(prevState.totalScans);\n          const scan = {\n            ...newScans.get(hash),\n            state: ScanStates.FAILED,\n            scanTimestamp: performance.now()\n          }\n          return {\n            totalScans: newScans.set(hash, scan)\n          }\n        });\n        let scan = this.state.totalScans.get(hash);\n        console.log(scan);\n      }\n    }\n\n    let signInFailed = (event) => {\n      console.error(\"An error occurred while signing in the person.\");\n      this.state.totalScans.get(hash).state = ScanStates.FAILED;\n\n      let scan = this.state.totalScans.get(hash);\n      console.log(scan);\n    }\n\n    let signInRequest = new XMLHttpRequest();\n\n    signInRequest.addEventListener(\"load\", signInComplete);\n    signInRequest.addEventListener(\"error\", signInFailed);\n\n    signInRequest.open(\"POST\", this.state.serverUrl + \"/people-service/checkin/signin\", true);\n    signInRequest.setRequestHeader(\"Access-Control-Allow-Headers\", \"*\");\n    signInRequest.setRequestHeader(\"Content-Type\", \"application/json\");\n    signInRequest.send(JSON.stringify({\"hash\": hash, \"message\": \"signing in today again\"}));\n\n    console.log(signInRequest);\n  }\n\n  render() {\n    let logs = [];\n    for (let i = 0; i < this.props.logs.length; i++) {\n      let log = this.props.logs[i];\n      if (log === null) {\n        log = \"null\";\n      }\n      logs.push(<div key={i}>{log}</div>);\n    }\n\n    let personWord;\n    if (this.state.successfulScanCount === 1) {\n      personWord = \"person\";\n    } else {\n      personWord = \"people\";\n    }\n\n    return (\n      <div>\n        <div>\n          <div className=\"scanCount\">\n            {this.state.successfulScanCount}\n          </div>\n          <div className=\"scanCountText\">\n            {personWord} signed in.\n          </div>\n        </div>\n        {logs}\n      </div>\n    )\n  }\n}\n\nconst ScanStates = Object.freeze({\n  PROCESSING: {\n    name: \"PROCESSING\"\n  },\n  SIGNED_IN: {\n    name: \"SIGNED_IN\"\n  },\n  FAILED: {\n    name: \"FAILED\"\n  }\n});\n\nexport default ScanLog;","import React, {Component} from 'react';\n\nclass Report extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      scannedPeople: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        Report\n      </div>\n    )\n  }\n}\n\nexport default Report;","import React, {Component} from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Settings from './components/Settings.js'\nimport QrScanner from './components/QrScanner.js'\nimport ScanLog from './components/ScanLog.js'\nimport Report from './components/Report.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let currentCamera = window.localStorage.getItem('qrCamera');\n    if (currentCamera === undefined || currentCamera === null) {\n      currentCamera = this.props.currentCamera;\n    }\n\n    let delayRate = window.localStorage.getItem('qrDelayRate');\n    if (delayRate === undefined || delayRate === null) {\n      delayRate = this.props.delayRate;\n    }\n    delayRate = parseInt(delayRate);\n\n    let serverSetting = window.localStorage.getItem('serverSetting');\n    if (serverSetting === undefined || serverSetting === null) {\n      serverSetting = this.props.serverSetting;\n    }\n\n    this.state = {\n      logs: [],\n      currentCamera: currentCamera,\n      delayRate: delayRate,\n      serverSetting: serverSetting,\n      nextScan: null\n    }\n\n    this.addLog = this.addLog.bind(this);\n    this.changeCamera = this.changeCamera.bind(this);\n    this.changeDelayRate = this.changeDelayRate.bind(this);\n    this.changeServerSetting = this.changeServerSetting.bind(this);\n//    this.processScan = this.processScan.bind(this);\n  }\n\n  addLog = (log) => {\n    let logs = this.state.logs;\n    logs.push(log);\n    if (logs.length > 10) {\n      logs.shift();\n    }\n\n//    console.log(logs);\n\n    this.setState({\n      logs: logs\n    });\n  }\n\n  addSuccessfulSignIn = (serverLog) => {\n\n  }\n\n  changeCamera = (changedCamera) => {\n    this.setState({\n      currentCamera: changedCamera\n    });\n    window.localStorage.setItem(\"qrCamera\", changedCamera);\n    this.updateCamera(changedCamera);\n  }\n\n  changeDelayRate = (changedDelayRate) => {\n    this.setState({\n      delayRate: changedDelayRate\n    });\n    window.localStorage.setItem(\"qrDelayRate\", changedDelayRate);\n    this.updateDelayRate(changedDelayRate);\n  }\n\n  changeServerSetting = (changedServerSetting) => {\n    this.setState({\n      serverSetting: changedServerSetting\n    });\n    window.localStorage.setItem(\"serverSetting\", changedServerSetting);\n    this.updateServerUrl(changedServerSetting);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Settings initialCamera={this.state.currentCamera}\n                    initialDelayRate={this.state.delayRate}\n                    initialServerSetting={this.state.serverSetting}\n                    changeCamera={this.changeCamera}\n                    changeDelayRate={this.changeDelayRate}\n                    changeServerSetting={this.changeServerSetting}/>\n          <QrScanner addLog={this.addLog}\n                      currentCamera={this.state.currentCamera}\n                      delayRate={this.state.delayRate}\n                      processScan={this.processScan}\n                      updateDelayRate={newDelayRate => this.updateDelayRate = newDelayRate}\n                      updateCamera={newCamera => this.updateCamera = newCamera}/>\n          <ScanLog logs={this.state.logs}\n                    initialServerSetting={this.state.serverSetting}\n                    processScan={newScan => this.processScan = newScan}\n                    updateServerUrl={newUrl => this.updateServerUrl = newUrl}\n                    addLog={this.addLog}\n                    addSuccessfulSignIn={this.addSuccessfulSignIn}\n                    />\n          <Report />\n        </header>\n      </div>\n    );\n  }\n}\n\nApp.defaultProps = {\n currentCamera: 'environment',\n delayRate: 300,\n serverSetting: 'https://localhost:8000'\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}