{"version":3,"sources":["webpack://LuigiClient/webpack/universalModuleDefinition","webpack://LuigiClient/webpack/bootstrap","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/createClass.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/inherits.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/typeof.js","webpack://LuigiClient/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://LuigiClient/./src/baseClass.js","webpack://LuigiClient/./src/helpers.js","webpack://LuigiClient/./src/lifecycleManager.js","webpack://LuigiClient/./src/splitViewHandle.js","webpack://LuigiClient/./src/linkManager.js","webpack://LuigiClient/./src/uxManager.js","webpack://LuigiClient/./src/storageManager.js","webpack://LuigiClient/./src/luigi-client.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","configurable","writable","protoProps","staticProps","_typeof","assertThisInitialized","self","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","constructor","ReferenceError","obj","iterator","_setPrototypeOf","LuigiClientBase","this","promises","helpers","listeners","origin","helperListener","evt","data","msg","message","convertCustomMessageInternalToUser","filter","listener","id","map","eventFn","listenerId","addEventListener","internalMessage","getRandomId","push","Boolean","find","crypto","msCrypto","getRandomValues","Uint32Array","item","setLuigiCoreDomain","parent","postMessage","console","warn","lifecycleManager","luigiInitialized","defaultContextKeys","setCurrentContext","reduce","acc","_onContextUpdatedFns","_onInactiveFns","_onInitFns","authData","_isDeferInitDefined","luigiClientInit","document","head","hasAttribute","setContext","rawData","index","JSON","parse","e","info","setAuthData","eventPayload","_notifyInit","sendPostMessageToLuigiCore","_notifyInactive","currentContext","internal","isNavigateBack","withoutSync","history","replaceState","luigiInduced","viewUrl","dispatchEvent","PopStateEvent","state","assign","context","undefined","pathParams","_notifyUpdate","clientVersion","require","version","_tpcCheck","luigiCookie","luigiCookieKey","tpc","cookies","cookie","split","trim","objWithFns","payload","isFunction","_callAllFns","initFn","getLuigiCoreDomain","contextUpdatedFn","inactiveFn","customMessageId","customMessageListener","customMessage","removeEventListener","accessToken","getEventData","activeFeatureToggleList","nodeParams","clientPermissions","setTargetOrigin","customMessageInternal","convertCustomMessageUserToInternal","userSettings","splitViewHandle","settings","validSplitViewEvents","splitView","exists","size","collapsed","on","newSize","forEach","action","sendSplitViewEvent","callback","includes","linkManager","values","options","preserveView","errorSkipNavigation","fromContext","fromClosestContext","fromVirtualTreeRoot","fromParent","relative","link","path","sessionId","modalSettings","splitViewSettings","drawerSettings","relativePath","hasIntent","toLowerCase","navigationOpenMsg","params","intent","modal","drawer","navigate","navigationContext","parentNavigationContexts","indexOf","error","currentId","Date","now","pathExistsPromises","getPromise","resolveFn","then","setPromise","correlationId","pathExists","pathExistsMsg","viewStackSize","goBackValue","goBackContext","stringify","uxManager","currentLocale","isDirty","dirty","hideConfirmationModal","confirmationModalPromise","promise","Promise","resolve","reject","rejectFn","confirmed","hideAlert","closeAfter","alertPromises","alerts","locale","currentTheme","pendingOperation","Map","StorageManager","storageEventProcessor","StorageEventProcessor","processEvent","execute","has","log","promiseOperations","status","result","delete","start","getTime","syncOperation","operation","createPendingOperation","sendMessage","set","storageManager","LuigiClient","top","getAttribute","pushState","addInitListener","removeInitListener","addContextUpdateListener","removeContextUpdateListener","getToken","getContext","getNodeParams","getActiveFeatureToggles","getPathParams","getClientPermissions","sendCustomMessage","messageId","addCustomMessageListener","removeCustomMessageListener","addInactiveListener","removeInactiveListener","getUserSettings","isLuigiClientInitialized"],"mappings":"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","file":"luigi-client.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LuigiClient\"] = factory();\n\telse\n\t\troot[\"LuigiClient\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","/**\n * @private\n * @abstract\n */\nexport class LuigiClientBase {\n  /**\n   * @private\n   */\n  constructor() {\n    this.promises = {};\n  }\n  /**\n   * Returns the promises object\n   * @private\n   */\n  setPromise(name, value) {\n    this.promises[name] = value;\n  }\n  /**\n   * Sets the promises object\n   * @private\n   */\n  getPromise(name) {\n    return this.promises[name];\n  }\n}\n","/** @private */\nclass Helpers {\n  /** @private */\n  constructor() {\n    this.listeners = [];\n    this.origin = '';\n\n    const helperListener = function(evt) {\n      if (!evt.data.msg) {\n        return;\n      }\n      if (evt.data.msg === 'custom') {\n        const message = this.convertCustomMessageInternalToUser(evt.data);\n        this.listeners\n          .filter(listener => listener.name === message.id)\n          .map(listener => listener.eventFn(message, listener.listenerId));\n      } else {\n        this.listeners\n          .filter(listener => listener.name === evt.data.msg)\n          .map(listener => listener.eventFn(evt, listener.listenerId));\n      }\n    }.bind(this);\n\n    window.addEventListener('message', helperListener);\n  }\n\n  convertCustomMessageInternalToUser(internalMessage) {\n    return internalMessage.data;\n  }\n\n  convertCustomMessageUserToInternal(message) {\n    return {\n      msg: 'custom',\n      data: message\n    };\n  }\n\n  convertStorageMessageToInternal(message) {\n    return {\n      msg: 'storage',\n      data: message\n    };\n  }\n\n  /**\n   * Registers a post message listener\n   * Don't forget to remove the event listener at the end of\n   * your eventFn if you do not need it anymore.\n   * @private\n   * @param {string} name event name\n   * @param {function} eventFn callback function\n   * @returns {string} listener id\n   */\n  addEventListener(name, eventFn) {\n    const listenerId = this.getRandomId();\n    this.listeners.push({\n      name,\n      eventFn,\n      listenerId\n    });\n    return listenerId;\n  }\n\n  /**\n   * Removes a post message listener\n   * @private\n   * @param {string} id listenerId\n   */\n  removeEventListener(id) {\n    const listenerExists = Boolean(this.listeners.find(l => l.listenerId === id));\n    if (listenerExists) {\n      this.listeners = this.listeners.filter(l => l.listenerId !== id);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Creates a random Id\n   * @private\n   */\n  getRandomId() {\n    // window.msCrypto for IE 11\n    return (window.crypto || window.msCrypto).getRandomValues(new Uint32Array(1))[0];\n  }\n\n  /**\n   * Simple function check.\n   * @private\n   * @param {function} item\n   * @returns {boolean}\n   */\n  isFunction(item) {\n    return typeof item === 'function';\n  }\n\n  getLuigiCoreDomain() {\n    return this.origin;\n  }\n\n  setLuigiCoreDomain(origin) {\n    if (origin) {\n      this.origin = origin;\n    }\n  }\n\n  setTargetOrigin(origin) {\n    this.setLuigiCoreDomain(origin);\n  }\n\n  sendPostMessageToLuigiCore(msg) {\n    if (this.origin) {\n      window.parent.postMessage(msg, this.origin);\n    } else {\n      console.warn(\n        'There is no target origin set. You can specify the target origin by calling LuigiClient.setTargetOrigin(\"targetorigin\") in your micro frontend.'\n      );\n    }\n  }\n}\n\nexport const helpers = new Helpers();\n","import { LuigiClientBase } from './baseClass';\nimport { helpers } from './helpers';\n\n/**\n * Use the functions and parameters to define the Lifecycle of listeners, navigation nodes, and Event data.\n * @name Lifecycle\n */\nclass LifecycleManager extends LuigiClientBase {\n  /** @private */\n  constructor() {\n    super();\n    this.luigiInitialized = false;\n    this.defaultContextKeys = ['context', 'internal', 'nodeParams', 'pathParams'];\n    this.setCurrentContext(\n      this.defaultContextKeys.reduce(function(acc, key) {\n        acc[key] = {};\n        return acc;\n      }, {})\n    );\n\n    this._onContextUpdatedFns = {};\n    this._onInactiveFns = {};\n    this._onInitFns = {};\n    this.authData = {};\n\n    if (!this._isDeferInitDefined()) {\n      this.luigiClientInit();\n    }\n  }\n\n  /**\n   * Check if the html head element contains the attribute \"defer-luigi-init\"\n   * @private\n   * @memberof Lifecycle\n   */\n  _isDeferInitDefined() {\n    return window.document.head.hasAttribute('defer-luigi-init');\n  }\n\n  /**\n   * Check if LuigiClient is initialized\n   * @returns {boolean} client initialized state\n   * @since 1.12.0\n   * @memberof Lifecycle\n   * @example\n   * const init = LuigiClient.isLuigiClientInitialized()\n   */\n  isLuigiClientInitialized() {\n    return this.luigiInitialized;\n  }\n\n  /**\n   * Starts the handshake with Luigi Core and thereafter resulting in initialization of Luigi Client. It is always ran by default when importing luigi-client package in your micro frontend. Note that when using 'defer-luigi-init' to defer default initialization you will need to initialize the handshake using this function manually wherever needed.\n   * @since 1.12.0\n   * @memberof Lifecycle\n   * @example\n   * LuigiClient.luigiClientInit()\n   */\n  luigiClientInit() {\n    if (this.luigiInitialized) {\n      console.warn('Luigi Client has been already initialized');\n      return;\n    }\n    /**\n     * Save context data every time navigation to a different node happens\n     * @private\n     */\n    const setContext = rawData => {\n      for (let index = 0; index < this.defaultContextKeys.length; index++) {\n        let key = this.defaultContextKeys[index];\n        try {\n          if (typeof rawData[key] === 'string') {\n            rawData[key] = JSON.parse(rawData[key]);\n          }\n        } catch (e) {\n          console.info('unable to parse luigi context data for', key, rawData[key], e);\n        }\n      }\n      this.setCurrentContext(rawData);\n    };\n\n    const setAuthData = eventPayload => {\n      if (eventPayload) {\n        this.authData = eventPayload;\n      }\n    };\n\n    helpers.addEventListener('luigi.init', e => {\n      setContext(e.data);\n      setAuthData(e.data.authData);\n      helpers.setLuigiCoreDomain(e.origin);\n      this.luigiInitialized = true;\n      this._notifyInit(e.origin);\n      helpers.sendPostMessageToLuigiCore({ msg: 'luigi.init.ok' });\n    });\n\n    helpers.addEventListener('luigi-client.inactive-microfrontend', e => {\n      this._notifyInactive(e.origin);\n    });\n\n    helpers.addEventListener('luigi.auth.tokenIssued', e => {\n      setAuthData(e.data.authData);\n    });\n\n    helpers.addEventListener('luigi.navigate', e => {\n      setContext(e.data);\n      if (!this.currentContext.internal.isNavigateBack && !this.currentContext.withoutSync) {\n        history.replaceState({ luigiInduced: true }, '', e.data.viewUrl);\n        window.dispatchEvent(new PopStateEvent('popstate', { state: 'luiginavigation' }));\n      }\n      // pass additional data to context to enable micro frontend developer to act on internal routing change\n      if (this.currentContext.withoutSync) {\n        Object.assign(this.currentContext.context, {\n          viewUrl: e.data.viewUrl ? e.data.viewUrl : undefined,\n          pathParams: e.data.pathParams ? e.data.pathParams : undefined\n        });\n      }\n      // execute the context change listener if set by the micro frontend\n      this._notifyUpdate();\n      helpers.sendPostMessageToLuigiCore({ msg: 'luigi.navigate.ok' });\n    });\n\n    /**\n     * Get context once initially\n     * @private\n     */\n    window.parent.postMessage(\n      {\n        msg: 'luigi.get-context',\n        clientVersion: require('../public/package.json').version\n      },\n      '*'\n    );\n    this._tpcCheck();\n  }\n\n  _tpcCheck() {\n    let tpc = 'enabled';\n    let cookies = document.cookie;\n    let luigiCookie;\n    let luigiCookieKey;\n    if (cookies) {\n      luigiCookie = cookies\n        .split(';')\n        .map(cookie => cookie.trim())\n        .find(cookie => cookie == 'luigiCookie=true');\n    }\n    if (luigiCookie === 'luigiCookie=true') {\n      luigiCookieKey = luigiCookie.split('=')[0];\n      document.cookie = luigiCookieKey + '=; Max-Age=-99999999;';\n    }\n    document.cookie = 'luigiCookie=true';\n    cookies = document.cookie;\n    if (cookies) {\n      luigiCookie = cookies\n        .split(';')\n        .map(cookie => cookie.trim())\n        .find(cookie => cookie == 'luigiCookie=true');\n    }\n    if (luigiCookie === 'luigiCookie=true') {\n      window.parent.postMessage({ msg: 'luigi.third-party-cookie', tpc }, '*');\n      document.cookie = luigiCookieKey + '=; Max-Age=-99999999;';\n    } else {\n      tpc = 'disabled';\n      window.parent.postMessage({ msg: 'luigi.third-party-cookie', tpc }, '*');\n      console.warn('Third party cookies are not supported!');\n    }\n  }\n\n  /**\n   * Iterates over an object and executes all top-level functions\n   * with a given payload.\n   * @private\n   * @memberof Lifecycle\n   */\n  _callAllFns(objWithFns, payload, origin) {\n    for (let id in objWithFns) {\n      if (objWithFns.hasOwnProperty(id) && helpers.isFunction(objWithFns[id])) {\n        objWithFns[id](payload, origin);\n      }\n    }\n  }\n\n  /**\n   * Notifies all context init listeners.\n   * @private\n   * @memberof Lifecycle\n   */\n  _notifyInit(origin) {\n    this._callAllFns(this._onInitFns, this.currentContext.context, origin);\n  }\n\n  /**\n   * Notifies all context update listeners.\n   * @private\n   * @memberof Lifecycle\n   */\n  _notifyUpdate() {\n    this._callAllFns(this._onContextUpdatedFns, this.currentContext.context);\n  }\n\n  /**\n   * Notifies all inactive listeners.\n   * @private\n   * @memberof Lifecycle\n   */\n  _notifyInactive() {\n    this._callAllFns(this._onInactiveFns);\n  }\n\n  /**\n   * @private\n   * @memberof Lifecycle\n   */\n  setCurrentContext(value) {\n    this.currentContext = value;\n  }\n\n  /**\n   * Registers a listener called with the context object and the Luigi Core domain as soon as Luigi is instantiated. Defer your application bootstrap if you depend on authentication data coming from Luigi.\n   * @param {Lifecycle~initListenerCallback} initFn the function that is called once Luigi is initialized, receives current context and origin as parameters\n   * @memberof Lifecycle\n   * @example\n   * const initListenerId = LuigiClient.addInitListener((context) => storeContextToMF(context))\n   */\n  addInitListener(initFn) {\n    const id = helpers.getRandomId();\n    this._onInitFns[id] = initFn;\n    if (this.luigiInitialized && helpers.isFunction(initFn)) {\n      initFn(this.currentContext.context, helpers.getLuigiCoreDomain());\n    }\n    return id;\n  }\n\n  /**\n   * Callback of the addInitListener\n   * @callback Lifecycle~initListenerCallback\n   * @param {Object} context current context data\n   * @param {string} origin Luigi Core URL\n   */\n  /**\n   * Removes an init listener.\n   * @param {string} id the id that was returned by the `addInitListener` function.\n   * @memberof Lifecycle\n   * @example\n   * LuigiClient.removeInitListener(initListenerId)\n   */\n  removeInitListener(id) {\n    if (this._onInitFns[id]) {\n      this._onInitFns[id] = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Registers a listener called with the context object when the URL is changed. For example, you can use this when changing environments in a context switcher in order for the micro frontend to do an API call to the environment picked.\n   * @param {function} contextUpdatedFn the listener function called each time Luigi context changes\n   * @memberof Lifecycle\n   * @example\n   * const updateListenerId = LuigiClient.addContextUpdateListener((context) => storeContextToMF(context))\n   */\n  addContextUpdateListener(contextUpdatedFn) {\n    const id = helpers.getRandomId();\n    this._onContextUpdatedFns[id] = contextUpdatedFn;\n    if (this.luigiInitialized && helpers.isFunction(contextUpdatedFn)) {\n      contextUpdatedFn(this.currentContext.context);\n    }\n    return id;\n  }\n\n  /**\n   * Removes a context update listener.\n   * @param {string} id the id that was returned by the `addContextUpdateListener` function\n   * @memberof Lifecycle\n   * @example\n   * LuigiClient.removeContextUpdateListener(updateListenerId)\n   */\n  removeContextUpdateListener(id) {\n    if (this._onContextUpdatedFns[id]) {\n      this._onContextUpdatedFns[id] = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Registers a listener called upon micro frontend inactivity. This happens when a new micro frontend gets shown while keeping the old one cached.\n   * Gets called when:\n   * - navigating with **preserveView**\n   * - navigating from or to a **viewGroup**\n   *\n   * Does not get called when navigating normally, or when `openAsModal` or `openAsSplitView` are used.\n   * Once the micro frontend turns back into active state, the `addContextUpdateListener` receives an updated context.\n   * @param {function} inactiveFn the listener function called each time a micro frontend turns into an inactive state\n   * @memberof Lifecycle\n   * @example\n   * LuigiClient.addInactiveListener(() => mfIsInactive = true)\n   * const inactiveListenerId = LuigiClient.addInactiveListener(() => mfIsInactive = true)\n   */\n  addInactiveListener(inactiveFn) {\n    const id = helpers.getRandomId();\n    this._onInactiveFns[id] = inactiveFn;\n    return id;\n  }\n\n  /**\n   * Removes a listener for inactive micro frontends.\n   * @param {string} id the id that was returned by the `addInactiveListener` function\n   * @memberof Lifecycle\n   * @example\n   * LuigiClient.removeInactiveListener(inactiveListenerId)\n   */\n  removeInactiveListener(id) {\n    if (this._onInactiveFns[id]) {\n      this._onInactiveFns[id] = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Registers a listener called when the micro frontend receives a custom message.\n   * @param {string} customMessageId the custom message id\n   * @param {Lifecycle~customMessageListenerCallback} customMessageListener the function that is called when the micro frontend receives the corresponding event\n   * @memberof Lifecycle\n   * @since 0.6.2\n   * @example\n   * const customMsgId = LuigiClient.addCustomMessageListener('myapp.project-updated', (data) => doSomething(data))\n   */\n  addCustomMessageListener(customMessageId, customMessageListener) {\n    return helpers.addEventListener(customMessageId, (customMessage, listenerId) => {\n      return customMessageListener(customMessage, listenerId);\n    });\n  }\n\n  /**\n   * Callback of the customMessageListener\n   * @callback Lifecycle~customMessageListenerCallback\n   * @param {Object} customMessage custom message object\n   * @param {string} customMessage.id message id\n   * @param {*} customMessage.MY_DATA_FIELD any other message data field\n   * @param {string} listenerId custom message listener id to be used for unsubscription\n   */\n  /**\n   * Removes a custom message listener.\n   * @param {string} id the id that was returned by the `addInitListener` function\n   * @memberof Lifecycle\n   * @since 0.6.2\n   * LuigiClient.removeCustomMessageListener(customMsgId)\n   */\n  removeCustomMessageListener(id) {\n    return helpers.removeEventListener(id);\n  }\n\n  /**\n   * Returns the currently valid access token.\n   * @returns {string} current access token\n   * @memberof Lifecycle\n   * @example\n   * const accessToken = LuigiClient.getToken()\n   */\n  getToken() {\n    return this.authData.accessToken;\n  }\n\n  /**\n   * Returns the context object. Typically it is not required as the {@link #addContextUpdateListener addContextUpdateListener()} receives the same values.\n   * @returns {Object} current context data\n   * @memberof Lifecycle\n   * @example\n   * const context = LuigiClient.getContext()\n   */\n  getContext() {\n    return this.getEventData();\n  }\n\n  /**\n   * Returns the context object. It is an alias function for getContext().\n   * @returns {Object} current context data\n   * @memberof Lifecycle\n   * @deprecated\n   */\n  getEventData() {\n    return this.currentContext.context;\n  }\n\n  /**Returns a list of active feature toggles\n   * @returns {Array} a list of feature toggle names\n   * @memberof Lifecycle\n   * @since 1.4.0\n   * @example\n   * const activeFeatureToggleList = LuigiClient.getActiveFeatureToggles()\n   */\n  getActiveFeatureToggles() {\n    return this.currentContext.internal.activeFeatureToggleList;\n  }\n  /**\n   * Returns the node parameters of the active URL.\n   * Node parameters are defined like URL query parameters but with a specific prefix allowing Luigi to pass them to the micro frontend view. The default prefix is **~** and you can use it in the following way: `https://my.luigi.app/home/products?~sort=asc~page=3`.\n   * <!-- add-attribute:class:warning -->\n   * > **NOTE:** some special characters (`<`, `>`, `\"`, `'`, `/`) in node parameters are HTML-encoded.\n   * @returns {Object} node parameters, where the object property name is the node parameter name without the prefix, and its value is the value of the node parameter. For example `{sort: 'asc', page: 3}`\n   * @memberof Lifecycle\n   * @example\n   * const nodeParams = LuigiClient.getNodeParams()\n   */\n  getNodeParams() {\n    return this.currentContext.nodeParams;\n  }\n  /**\n   * Returns the dynamic path parameters of the active URL.\n   * Path parameters are defined by navigation nodes with a dynamic **pathSegment** value starting with **:**, such as **productId**.\n   * All path parameters in the current navigation path (as defined by the active URL) are returned.\n   * <!-- add-attribute:class:warning -->\n   * > **NOTE:** some special characters (`<`, `>`, `\"`, `'`, `/`) in path parameters are HTML-encoded.\n   * @returns {Object} path parameters, where the object property name is the path parameter name without the prefix, and its value is the actual value of the path parameter. For example ` {productId: 1234, ...}`\n   * @memberof Lifecycle\n   * @example\n   * const pathParams = LuigiClient.getPathParams()\n   */\n  getPathParams() {\n    return this.currentContext.pathParams;\n  }\n\n  /**\n   * Returns the current client permissions as specified in the navigation node or an empty object. For details, see [Node parameters](navigation-parameters-reference.md).\n   * @returns {Object} client permissions as specified in the navigation node\n   * @memberof Lifecycle\n   * @example\n   * const permissions = LuigiClient.getClientPermissions()\n   */\n  getClientPermissions() {\n    return this.currentContext.internal.clientPermissions || {};\n  }\n\n  /**\n   * When the micro frontend is not embedded in the Luigi Core application and there is no init handshake you can set the target origin that is used in postMessage function calls by Luigi Client. Typically used only in custom micro-frontend frameworks that are compatible with LuigiClient API.\n   * @param {string} origin target origin\n   * @memberof Lifecycle\n   * @since 0.7.3\n   * @example\n   * LuigiClient.setTargetOrigin(window.location.origin)\n   */\n  setTargetOrigin(origin) {\n    helpers.setTargetOrigin(origin);\n  }\n\n  /**\n   * Sends a custom message to the Luigi Core application.\n   * @param {Object} message an object containing data to be sent to the Luigi Core to process it further. This object is set as an input parameter of the custom message listener on the Luigi Core side\n   * @param {string} message.id a string containing the message id\n   * @param {*} message.MY_DATA_FIELD any other message data field\n   * @example\n   * LuigiClient.sendCustomMessage({id: 'environment.created', production: false})\n   * LuigiClient.sendCustomMessage({id: 'environment.created', data: environmentDataObj})\n   * @memberof Lifecycle\n   * @since 0.6.2\n   */\n  sendCustomMessage(message) {\n    const customMessageInternal = helpers.convertCustomMessageUserToInternal(message);\n    helpers.sendPostMessageToLuigiCore(customMessageInternal);\n  }\n\n  /**\n   * Returns the current user settings based on the selected node.\n   * @returns {Object} current user settings\n   * @since 1.7.1\n   * @memberof Lifecycle\n   * @example\n   * const userSettings = LuigiClient.getUserSettings()\n   */\n  getUserSettings() {\n    return this.currentContext.internal.userSettings;\n  }\n}\nexport const lifecycleManager = new LifecycleManager();\n","import { LuigiClientBase } from './baseClass';\nimport { helpers } from './helpers';\n\n/**\n * Split view \n  Allows to open a micro frontend in a split screen in the lower part of the content area. Open it by calling `const splitViewHandle = LuigiClient.linkManager().openAsSplitView`. \n  At a given time, you can open only one split view. It closes automatically when you navigate to a different route.\n  When you call `handle.collapse()`, the split view gets destroyed. It recreates when you use `handle.expand()`.\n  `openAsSplitView` returns an instance of the split view handle. The functions, actions, and event handlers listed below allow you to control and manage the split view.\n  * @name splitView\n  * @since 0.6.0\n  */\nexport class splitViewHandle extends LuigiClientBase {\n  /**\n   * @private\n   */\n  constructor(settings) {\n    super();\n\n    this.validSplitViewEvents = ['expand', 'collapse', 'resize', 'close'];\n\n    this.splitView = {\n      exists: true,\n      size: 40,\n      collapsed: false\n    };\n\n    Object.assign(this.splitView, settings);\n\n    const removeSplitViewListeners = () => {\n      this.splitView.listeners.forEach(id => helpers.removeEventListener(id));\n    };\n\n    this.splitView.listeners = [\n      helpers.addEventListener(`luigi.navigation.splitview.internal`, e => {\n        Object.assign(this.splitView, e.data.data);\n      })\n    ];\n    this.on('resize', newSize => {\n      this.splitView.size = newSize;\n    });\n    this.on('close', removeSplitViewListeners);\n  }\n  /*\n   * @private\n   */\n  sendSplitViewEvent(action, data) {\n    helpers.sendPostMessageToLuigiCore({\n      msg: `luigi.navigation.splitview.${action}`,\n      data\n    });\n  }\n\n  /**\n   * Collapses the split view\n   * @memberof splitView\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.collapse();\n   */\n  collapse() {\n    this.sendSplitViewEvent('collapse');\n  }\n  /**\n   * Expands the split view\n   * @memberof splitView\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.expand();\n   */\n  expand() {\n    this.sendSplitViewEvent('expand');\n  }\n\n  /**\n   * Closes and destroys the split view\n   * @memberof splitView\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.close();\n   */\n  close() {\n    this.sendSplitViewEvent('close');\n  }\n  /**\n   * Sets the height of the split view\n   * @memberof splitView\n   * @param {number} value lower height in percent\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.setSize(60);\n   */\n  setSize(value) {\n    this.sendSplitViewEvent('resize', value);\n  }\n  /**\n   * Registers a listener for split view events\n   * @memberof splitView\n   * @param {('expand'|'collapse'|'resize'|'close')} name event name\n   * @param {function} callback gets called when this event gets triggered by Luigi\n   * @returns {string} listener id\n   * @since 0.6.0\n   * @example\n   * const listenerId = splitViewHandle.on('expand', () => {});\n   * const listenerId = splitViewHandle.on('collapse', () => {});\n   * const listenerId = splitViewHandle.on('resize', () => {});\n   * const listenerId = splitViewHandle.on('close', () => {});\n   **/\n  on(name, callback) {\n    if (!this.validSplitViewEvents.includes(name)) {\n      console.warn(name + ' is not a valid split view event');\n      return false;\n    }\n    const id = helpers.addEventListener(`luigi.navigation.splitview.${name}.ok`, e => callback(e.data.data));\n    this.splitView.listeners.push(id);\n    return id;\n  }\n  /**\n   * Unregisters a split view listener\n   * @memberof splitView\n   * @param {string} id listener id\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.removeEventListener(listenerId);\n   */\n  removeEventListener(id) {\n    return helpers.removeEventListener(id);\n  }\n\n  /**\n   * Gets the split view status\n   * @memberof splitView\n   * @returns {boolean} true if a split view is loaded\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.exists();\n   */\n  exists() {\n    return this.splitView.exists;\n  }\n  /**\n   * Reads the size of the split view\n   * @memberof splitView\n   * @returns {number} height in percent\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.getSize();\n   */\n  getSize() {\n    return this.splitView.size;\n  }\n  /**\n   * Reads the collapse status\n   * @memberof splitView\n   * @returns {boolean} true if the split view is currently collapsed\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.isCollapsed();\n   */\n  isCollapsed() {\n    return this.splitView.collapsed;\n  }\n  /**\n   * Reads the expand status\n   * @memberof splitView\n   * @returns {boolean} true if the split view is currently expanded\n   * @since 0.6.0\n   * @example\n   * splitViewHandle.isExpanded();\n   */\n  isExpanded() {\n    return !this.splitView.collapsed;\n  }\n}\n","import { LuigiClientBase } from './baseClass';\nimport { helpers } from './helpers';\nimport { splitViewHandle } from './splitViewHandle';\n\n/**\n * The Link Manager allows you to navigate to another route. Use it instead of an internal router to:\n  - Provide routing inside micro frontends.\n  - Reflect the route.\n  - Keep the navigation state in Luigi.\n  * @name linkManager\n  */\nexport class linkManager extends LuigiClientBase {\n  /**\n   * @private\n   */\n  constructor(values) {\n    super();\n    Object.assign(this, values);\n\n    this.options = {\n      preserveView: false,\n      nodeParams: {},\n      errorSkipNavigation: false,\n      fromContext: null,\n      fromClosestContext: false,\n      fromVirtualTreeRoot: false,\n      fromParent: false,\n      relative: false,\n      link: ''\n    };\n  }\n\n  /**\n   * Navigates to the given path in the application hosted by Luigi. It contains either a full absolute path or a relative path without a leading slash that uses the active route as a base. This is the standard navigation.\n   * @memberof linkManager\n   * @param {string} path path to be navigated to\n   * @param {string} sessionId current Luigi **sessionId**\n   * @param {boolean} preserveView preserve a view by setting it to `true`. It keeps the current view opened in the background and opens the new route in a new frame. Use the {@link #goBack goBack()} function to navigate back. You can use this feature across different levels. Preserved views are discarded as soon as you use the standard {@link #navigate navigate()} function instead of {@link #goBack goBack()}\n   * @param {Object} modalSettings opens a view in a modal. Use these settings to configure the modal's title and size\n   * @param {string} modalSettings.title modal title. By default, it is the node label. If there is no label, it is left empty\n   * @param {('l'|'m'|'s')} [modalSettings.size=\"l\"] size of the modal\n   * @param {Object} splitViewSettings opens a view in a split view. Use these settings to configure the split view's behaviour\n   * @param {string} splitViewSettings.title split view title. By default, it is the node label. If there is no label, it is left empty\n   * @param {number} [splitViewSettings.size=40] height of the split view in percent\n   * @param {boolean} [splitViewSettings.collapsed=false] creates split view but leaves it closed initially\n   * @param {Object} drawerSettings opens a view in a drawer. Use these settings to configure if the drawer has a header, backdrop and size.\n   * @param {any} drawerSettings.header By default, the header is visible. The default title is the node label, but the header could also be an object with a `title` attribute allowing you to specify your own title.  An 'x' icon is displayed to close the drawer view.\n   * @param {boolean} drawerSettings.backdrop By default, it is set to `false`. If it is set to `true` the rest of the screen has a backdrop.\n   * @param {('l'|'m'|'s'|'xs')} [drawerSettings.size=\"s\"] size of the drawer\n   * @example\n   * LuigiClient.linkManager().navigate('/overview')\n   * LuigiClient.linkManager().navigate('users/groups/stakeholders')\n   * LuigiClient.linkManager().navigate('/settings', null, true) // preserve view\n   * LuigiClient.linkManager().navigate('#?Intent=Sales-order?id=13') // intent navigation\n   */\n  navigate(path, sessionId, preserveView, modalSettings, splitViewSettings, drawerSettings) {\n    if (this.options.errorSkipNavigation) {\n      this.options.errorSkipNavigation = false;\n      return;\n    }\n    if (modalSettings && splitViewSettings && drawerSettings) {\n      console.warn(\n        'modalSettings, splitViewSettings and drawerSettings cannot be used together. Only modal setting will be taken into account.'\n      );\n    }\n\n    this.options.preserveView = preserveView;\n    const relativePath = path[0] !== '/';\n    const hasIntent = path.toLowerCase().includes('?intent=');\n    const navigationOpenMsg = {\n      msg: 'luigi.navigation.open',\n      sessionId: sessionId,\n      params: Object.assign(this.options, {\n        link: path,\n        relative: relativePath,\n        intent: hasIntent,\n        modal: modalSettings,\n        splitView: splitViewSettings,\n        drawer: drawerSettings\n      })\n    };\n    helpers.sendPostMessageToLuigiCore(navigationOpenMsg);\n  }\n\n  /**\n   * Opens a view in a modal. You can specify the modal's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty.  The default size of the modal is `l`, which means 80%. You can also use `m` (60%) and `s` (40%) to set the modal size. Optionally, use it in combination with any of the navigation functions.\n   * @memberof linkManager\n   * @param {string} path navigation path\n   * @param {Object} [modalSettings] opens a view in a modal. Use these settings to configure the modal's title and size\n   * @param {string} modalSettings.title modal title. By default, it is the node label. If there is no label, it is left empty\n   * @param {('l'|'m'|'s')} [modalSettings.size=\"l\"] size of the modal\n   * @example\n   * LuigiClient.linkManager().openAsModal('projects/pr1/users', {title:'Users', size:'m'});\n   */\n  openAsModal(path, modalSettings = {}) {\n    this.navigate(path, 0, true, modalSettings);\n  }\n\n  /**\n   * Opens a view in a split view. You can specify the split view's title and size. If you don't specify the title, it is the node label. If there is no node label, the title remains empty. The default size of the split view is `40`, which means 40% height of the split view.\n   * @memberof linkManager\n   * @param {string} path navigation path\n   * @param {Object} splitViewSettings opens a view in a split view. Use these settings to configure the split view's behaviour\n   * @param {string} splitViewSettings.title split view title. By default, it is the node label. If there is no label, it is left empty\n   * @param {number} [splitViewSettings.size=40] height of the split view in percent\n   * @param {boolean} [splitViewSettings.collapsed=false] opens split view in collapsed state\n   * @returns {Object} instance of the SplitView. It provides Event listeners and you can use the available functions to control its behavior.\n   * @see {@link splitView} for further documentation about the returned instance\n   * @since 0.6.0\n   * @example\n   * const splitViewHandle = LuigiClient.linkManager().openAsSplitView('projects/pr1/logs', {title: 'Logs', size: 40, collapsed: true});\n   */\n  openAsSplitView(path, splitViewSettings = {}) {\n    this.navigate(path, 0, true, undefined, splitViewSettings);\n    return new splitViewHandle(splitViewSettings);\n  }\n\n  /**\n   * Opens a view in a drawer. You can specify the size of the drawer, whether the drawer has a header, and whether a backdrop is active in the background. By default, the header is shown. The backdrop is not visible and has to be activated. The size of the drawer is set to `s` by default, which means 25% of the micro frontend size. You can also use `l`(75%), `m`(50%) or `xs`(15.5%). Optionally, use it in combination with any of the navigation functions.\n   * @memberof linkManager\n   * @param {string} path navigation path\n   * @param {Object} drawerSettings opens a view in a drawer. Use these settings to configure if the drawer has a header, backdrop and size.\n   * @param {any} drawerSettings.header By default, the header is visible. The default title is the node label, but the header could also be an object with a `title` attribute allowing you to specify your own title.  An 'x' icon is displayed to close the drawer view.\n   * @param {boolean} drawerSettings.backdrop By default, it is set to `false`. If it is set to `true` the rest of the screen has a backdrop.\n   * @param {('l'|'m'|'s'|'xs')} [drawerSettings.size=\"s\"] size of the drawer\n   * @since 1.6.0\n   * @example\n   * LuigiClient.linkManager().openAsDrawer('projects/pr1/drawer', {header:true, backdrop:true, size:'s'});\n   * LuigiClient.linkManager().openAsDrawer('projects/pr1/drawer', {header:{title:'My drawer component'}, backdrop:true, size:'xs'});\n   */\n  openAsDrawer(path, drawerSettings = {}) {\n    this.navigate(path, 0, true, undefined, undefined, drawerSettings);\n  }\n\n  /**\n   * Sets the current navigation context to that of a specific parent node which has the {@link navigation-configuration.md navigationContext} field declared in the navigation configuration. This navigation context is then used by the `navigate` function.\n   * @memberof linkManager\n   * @param {string} navigationContext\n   * @returns {linkManager} link manager instance\n   * @example\n   * LuigiClient.linkManager().fromContext('project').navigate('/settings')\n   */\n  fromContext(navigationContext) {\n    const navigationContextInParent =\n      this.currentContext.context.parentNavigationContexts &&\n      this.currentContext.context.parentNavigationContexts.indexOf(navigationContext) !== -1;\n    if (navigationContextInParent) {\n      this.options.fromContext = navigationContext;\n    } else {\n      this.options.errorSkipNavigation = true;\n      console.error('Navigation not possible, navigationContext ' + navigationContext + ' not found.');\n    }\n    return this;\n  }\n\n  /**\n   * Sets the current navigation context which is then used by the `navigate` function. This has to be a parent navigation context, it is not possible to use the child navigation contexts.\n   * @memberof linkManager\n   * @returns {linkManager} link manager instance\n   * @example\n   * LuigiClient.linkManager().fromClosestContext().navigate('/users/groups/stakeholders')\n   */\n  fromClosestContext() {\n    const hasParentNavigationContext =\n      this.currentContext && this.currentContext.context.parentNavigationContexts.length > 0;\n    if (hasParentNavigationContext) {\n      this.options.fromContext = null;\n      this.options.fromClosestContext = true;\n    } else {\n      console.error('Navigation not possible, no parent navigationContext found.');\n    }\n    return this;\n  }\n  /**\n   * Sets the current navigation base to the parent node that is defined as virtualTree. This method works only when the currently active micro frontend is inside a virtualTree.\n   * @memberof linkManager\n   * @returns {linkManager} link manager instance\n   * @since 1.0.1\n   * @example\n   * LuigiClient.linkManager().fromVirtualTreeRoot().navigate('/users/groups/stakeholders')\n   */\n  fromVirtualTreeRoot() {\n    this.options.fromContext = null;\n    this.options.fromClosestContext = false;\n    this.options.fromVirtualTreeRoot = true;\n    return this;\n  }\n\n  /**\n   * Enables navigating to sibling nodes without knowing the absolute path.\n   * @memberof linkManager\n   * @returns {linkManager} link manager instance\n   * @since 1.0.1\n   * @example\n   * LuigiClient.linkManager().fromParent().navigate('/sibling')\n   */\n  fromParent() {\n    this.options.fromParent = true;\n    return this;\n  }\n\n  /**\n   * Sends node parameters to the route. The parameters are used by the `navigate` function. Use it optionally in combination with any of the navigation functions and receive it as part of the context object in Luigi Client.\n   * @memberof linkManager\n   * @param {Object} nodeParams\n   * @returns {linkManager} link manager instance\n   * @example\n   * LuigiClient.linkManager().withParams({foo: \"bar\"}).navigate(\"path\")\n   *\n   * // Can be chained with context setting functions such as:\n   * LuigiClient.linkManager().fromContext(\"currentTeam\").withParams({foo: \"bar\"}).navigate(\"path\")\n   */\n  withParams(nodeParams) {\n    if (nodeParams) {\n      Object.assign(this.options.nodeParams, nodeParams);\n    }\n    return this;\n  }\n\n  /** @lends linkManager */\n  /**\n   * Checks if the path you can navigate to exists in the main application. For example, you can use this helper method conditionally to display a DOM element like a button.\n   * @memberof linkManager\n   * @param {string} path path which existence you want to check\n   * @returns {promise} a promise which resolves to a Boolean variable specifying whether the path exists or not\n   * @example\n   *  let pathExists;\n   *  LuigiClient\n   *  .linkManager()\n   *  .pathExists('projects/pr2')\n   *  .then(\n   *    (pathExists) => {  }\n   *  );\n   */\n  pathExists(path) {\n    const currentId = Date.now();\n    const pathExistsPromises = this.getPromise('pathExistsPromises') || {};\n    pathExistsPromises[currentId] = {\n      resolveFn: function() {},\n      then: function(resolveFn) {\n        this.resolveFn = resolveFn;\n      }\n    };\n    this.setPromise('pathExistsPromises', pathExistsPromises);\n\n    // register event listener, which will be cleaned up after this usage\n    helpers.addEventListener(\n      'luigi.navigation.pathExists.answer',\n      function(e, listenerId) {\n        const data = e.data.data;\n        const pathExistsPromises = this.getPromise('pathExistsPromises') || {};\n        if (pathExistsPromises[data.correlationId]) {\n          pathExistsPromises[data.correlationId].resolveFn(data.pathExists);\n          delete pathExistsPromises[data.correlationId];\n          this.setPromise('pathExistsPromises', pathExistsPromises);\n        }\n        helpers.removeEventListener(listenerId);\n      }.bind(this)\n    );\n\n    const pathExistsMsg = {\n      msg: 'luigi.navigation.pathExists',\n      data: {\n        id: currentId,\n        link: path,\n        relative: path[0] !== '/'\n      }\n    };\n    helpers.sendPostMessageToLuigiCore(pathExistsMsg);\n    return pathExistsPromises[currentId];\n  }\n\n  /**\n   * Checks if there is one or more preserved views. You can use it to show a **back** button.\n   * @memberof linkManager\n   * @returns {boolean} indicating if there is a preserved view you can return to\n   */\n  hasBack() {\n    return !!this.currentContext.internal.modal || this.currentContext.internal.viewStackSize !== 0;\n  }\n\n  /**\n   * Discards the active view and navigates back to the last visited view. Works with preserved views, and also acts as the substitute of the browser **back** button. **goBackContext** is only available when using preserved views.\n   * @memberof linkManager\n   * @param {any} goBackValue data that is passed in the **goBackContext** field to the last visited view when using preserved views\n   * @example\n   * LuigiClient.linkManager().goBack({ foo: 'bar' });\n   * LuigiClient.linkManager().goBack(true);\n   */\n  goBack(goBackValue) {\n    helpers.sendPostMessageToLuigiCore({\n      msg: 'luigi.navigation.back',\n      goBackContext: goBackValue && JSON.stringify(goBackValue)\n    });\n  }\n\n  /**\n   * Disables the navigation handling for a single navigation request\n   * It prevents Luigi Core from handling url change after `navigate()`.\n   * Used for auto-navigation\n   * @since 0.7.7\n   * @example\n   * LuigiClient.linkManager().withoutSync().navigate('/projects/xy/foobar');\n   * LuigiClient.linkManager().withoutSync().fromClosestContext().navigate('settings');\n   */\n  withoutSync() {\n    this.options.withoutSync = true;\n    return this;\n  }\n}\n","import { LuigiClientBase } from './baseClass';\nimport { lifecycleManager } from './lifecycleManager';\nimport { helpers } from './helpers';\n\n/**\n * Use the UX Manager to manage the appearance features in Luigi.\n * @name uxManager\n */\nclass UxManager extends LuigiClientBase {\n  /** @private */\n  constructor() {\n    super();\n    helpers.addEventListener('luigi.current-locale-changed', e => {\n      if (e.data.currentLocale && lifecycleManager.currentContext?.internal) {\n        lifecycleManager.currentContext.internal.currentLocale = e.data.currentLocale;\n        lifecycleManager._notifyUpdate();\n      }\n    });\n  }\n\n  /**\n   * Adds a backdrop with a loading indicator for the micro frontend frame. This overrides the {@link navigation-parameters-reference.md#node-parameters loadingIndicator.enabled} setting.\n   * @memberof uxManager\n   */\n  showLoadingIndicator() {\n    helpers.sendPostMessageToLuigiCore({ msg: 'luigi.show-loading-indicator' });\n  }\n\n  /**\n   * Removes the loading indicator. Use it after calling {@link #showLoadingIndicator showLoadingIndicator()} or to hide the indicator when you use the {@link navigation-parameters-reference.md#node-parameters loadingIndicator.hideAutomatically: false} node configuration.\n   * @memberof uxManager\n   */\n  hideLoadingIndicator() {\n    helpers.sendPostMessageToLuigiCore({ msg: 'luigi.hide-loading-indicator' });\n  }\n\n  /**\n   * Closes the currently opened micro frontend modal.\n   * @memberof uxManager\n   */\n  closeCurrentModal() {\n    helpers.sendPostMessageToLuigiCore({ msg: 'luigi.close-modal' });\n  }\n\n  /**\n   * Adds a backdrop to block the top and side navigation. It is based on the Fundamental UI Modal, which you can use in your micro frontend to achieve the same behavior.\n   * @memberof uxManager\n   */\n  addBackdrop() {\n    helpers.sendPostMessageToLuigiCore({ msg: 'luigi.add-backdrop' });\n  }\n  /**\n   * Removes the backdrop.\n   * @memberof uxManager\n   */\n  removeBackdrop() {\n    helpers.sendPostMessageToLuigiCore({ msg: 'luigi.remove-backdrop' });\n  }\n  /**\n   * This method informs the main application that there are unsaved changes in the current view in the iframe. It can be used to prevent navigation away from the current view, for example with form fields which were edited but not submitted. However, this functionality is not restricted to forms.\n   * @param {boolean} isDirty indicates if there are any unsaved changes on the current page or in the component\n   * @memberof uxManager\n   */\n  setDirtyStatus(isDirty) {\n    helpers.sendPostMessageToLuigiCore({\n      msg: 'luigi.set-page-dirty',\n      dirty: isDirty\n    });\n  }\n  /**\n   * Shows a confirmation modal.\n   * @memberof uxManager\n   * @param {Object} settings the settings of the confirmation modal. If you don't provide any value for any of the fields, a default value is used\n   * @param {('confirmation'|'success'|'warning'|'error'|'information')} settings.type the content of the modal type. (Optional)\n   * @param {string} [settings.header=\"Confirmation\"] the content of the modal header\n   * @param {string} [settings.body=\"Are you sure you want to do this?\"] the content of the modal body. It supports HTML formatting elements such as `<br>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<del>`, `<ins>`, `<sub>`, `<sup>`.\n   * @param {string|false} [settings.buttonConfirm=\"Yes\"] the label for the modal confirmation button. If set to `false`, the button will not be shown.\n   * @param {string} [settings.buttonDismiss=\"No\"] the label for the modal dismiss button\n   * @returns {promise} which is resolved when accepting the confirmation modal and rejected when dismissing it\n   * @example\n   * import LuigiClient from '@luigi-project/client';\n   * const settings = {\n   *  type: \"confirmation\",\n   *  header: \"Confirmation\",\n   *  body: \"Are you sure you want to do this?\",\n   *  buttonConfirm: \"Yes\",\n   *  buttonDismiss: \"No\"\n   * }\n   * LuigiClient\n   *  .uxManager()\n   *  .showConfirmationModal(settings)\n   *  .then(() => {\n   *     // Logic to execute when the confirmation modal is dismissed\n   *  });\n   */\n  showConfirmationModal(settings) {\n    helpers.addEventListener('luigi.ux.confirmationModal.hide', (e, listenerId) => {\n      this.hideConfirmationModal(e.data.data);\n      helpers.removeEventListener(listenerId);\n    });\n    helpers.sendPostMessageToLuigiCore({\n      msg: 'luigi.ux.confirmationModal.show',\n      data: { settings }\n    });\n\n    const confirmationModalPromise = {};\n    confirmationModalPromise.promise = new Promise((resolve, reject) => {\n      confirmationModalPromise.resolveFn = resolve;\n      confirmationModalPromise.rejectFn = reject;\n    });\n    this.setPromise('confirmationModal', confirmationModalPromise);\n    return confirmationModalPromise.promise;\n  }\n\n  /**\n   * @private\n   * @memberof uxManager\n   * @param {Object} modal confirmed boolean value if ok or cancel has been pressed\n   */\n  hideConfirmationModal(modal) {\n    const promise = this.getPromise('confirmationModal');\n    if (promise) {\n      modal.confirmed ? promise.resolveFn() : promise.rejectFn();\n      this.setPromise('confirmationModal', undefined);\n    }\n  }\n\n  /**\n   * Shows an alert.\n   * @memberof uxManager\n   * @param {Object} settings the settings for the alert\n   * @param {string} settings.text the content of the alert. To add a link to the content, you have to set up the link in the `links` object. The key(s) in the `links` object must be used in the text to reference the links, wrapped in curly brackets with no spaces. If you don't specify any text, the alert is not displayed\n   * @param {('info'|'success'|'warning'|'error')} settings.type sets the type of alert\n   * @param {Object} settings.links provides links data\n   * @param {Object} settings.links.LINK_KEY object containing the data for a particular link. To properly render the link in the alert message refer to the description of the **settings.text** parameter\n   * @param {string} settings.links.LINK_KEY.text text which replaces the link identifier in the alert content\n   * @param {string} settings.links.LINK_KEY.url url to navigate when you click the link. Currently, only internal links are supported in the form of relative or absolute paths\n   * @param {number} settings.closeAfter (optional) time in milliseconds that tells Luigi when to close the Alert automatically. If not provided, the Alert will stay on until closed manually. It has to be greater than `100`\n   * @returns {promise} which is resolved when the alert is dismissed\n   * @example\n   * import LuigiClient from '@luigi-project/client';\n   * const settings = {\n   *  text: \"Ut enim ad minim veniam, {goToHome} quis nostrud exercitation ullamco {relativePath}. Duis aute irure dolor {goToOtherProject}\",\n   *  type: 'info',\n   *  links: {\n   *    goToHome: { text: 'homepage', url: '/overview' },\n   *    goToOtherProject: { text: 'other project', url: '/projects/pr2' },\n   *    relativePath: { text: 'relative hide side nav', url: 'hideSideNav' }\n   *  },\n   *  closeAfter: 3000\n   * }\n   * LuigiClient\n   *  .uxManager()\n   *  .showAlert(settings)\n   *  .then(() => {\n   *     // Logic to execute when the alert is dismissed\n   *  });\n   */\n  showAlert(settings) {\n    helpers.addEventListener('luigi.ux.alert.hide', (e, listenerId) => {\n      this.hideAlert(e.data.id);\n      helpers.removeEventListener(listenerId);\n    });\n\n    //generate random ID\n    settings.id = helpers.getRandomId();\n    if (settings?.closeAfter < 100) {\n      console.warn(`Message with id='${settings.id}' has too small 'closeAfter' value. It needs to be at least 100ms.`);\n      settings.closeAfter = undefined;\n    }\n    helpers.sendPostMessageToLuigiCore({\n      msg: 'luigi.ux.alert.show',\n      data: { settings }\n    });\n\n    const alertPromises = this.getPromise('alerts') || {};\n    alertPromises[settings.id] = {};\n    alertPromises[settings.id].promise = new Promise(resolve => {\n      alertPromises[settings.id].resolveFn = resolve;\n    });\n    this.setPromise('alerts', alertPromises);\n    return alertPromises[settings.id].promise;\n  }\n  /**\n   * @private\n   * @memberof uxManager\n   * @param {string} id alert id\n   */\n  hideAlert(id) {\n    const alerts = this.getPromise('alerts');\n    if (id && alerts[id]) {\n      alerts[id].resolveFn(id);\n      delete alerts[id];\n      this.setPromise('alerts', alerts);\n    }\n  }\n\n  /**\n   * Gets the current locale.\n   * @returns {string} current locale\n   * @memberof uxManager\n   */\n  getCurrentLocale() {\n    return lifecycleManager.currentContext?.internal?.currentLocale;\n  }\n\n  /**\n   * Sets current locale to the specified one.\n   *\n   * **NOTE:** this must be explicitly allowed on the navigation node level by setting `clientPermissions.changeCurrentLocale` to `true`. (See {@link navigation-parameters-reference.md Node parameters}.)\n   *\n   * @param {string} locale locale to be set as the current locale\n   * @memberof uxManager\n   */\n  setCurrentLocale(locale) {\n    if (locale) {\n      helpers.sendPostMessageToLuigiCore({\n        msg: 'luigi.ux.set-current-locale',\n        data: {\n          currentLocale: locale\n        }\n      });\n    }\n  }\n\n  /**\n   * Checks if the current micro frontend is displayed inside a split view\n   * @returns {boolean} indicating if it is loaded inside a split view\n   * @memberof uxManager\n   * @since 0.6.0\n   */\n  isSplitView() {\n    return lifecycleManager.currentContext?.internal?.splitView;\n  }\n\n  /**\n   * Checks if the current micro frontend is displayed inside a modal\n   * @returns {boolean} indicating if it is loaded inside a modal\n   * @memberof uxManager\n   * @since 0.6.0\n   */\n  isModal() {\n    return lifecycleManager.currentContext?.internal?.modal;\n  }\n\n  /**\n   * Gets the current theme.\n   * @returns {*} current themeObj\n   * @memberof uxManager\n   */\n  getCurrentTheme() {\n    return lifecycleManager.currentContext?.internal?.currentTheme;\n  }\n}\nexport const uxManager = new UxManager();\n","import { LuigiClientBase } from './baseClass';\nimport { helpers } from './helpers';\n\nconst pendingOperation = new Map();\n\n/**\n * StorageManager allows you to use browser local storage of key/values. Every storage operation is sent to be managed by Luigi Core.\n * The idea is that different micro frontends can share or persist items using local storage.\n * Since all storage operations are asynchronous (sending an event to Luigi Core that will reply once operation is finished), all the methods return Promises.\n * @name storageManager\n */\nclass StorageManager extends LuigiClientBase {\n  /** @private */\n  constructor() {\n    super();\n    this.storageEventProcessor = new StorageEventProcessor();\n    helpers.addEventListener('storage', (evt, listenerId) => this.storageEventProcessor.processEvent(evt, listenerId));\n  }\n\n  /**\n   * Stores an item for a specific key.\n   * @memberof storageManager\n   * @param {string} key key used to identify the value\n   * @param {Object} value item to store; object must be stringifyable\n   * @returns {Promise<void>} resolves an empty value when the storage operation is over. It will launch an error if storage is not supported, the value cannot be stringified, or if you are using a Luigi reserved key.\n   * @example\n   * LuigiClient.storageManager().setItem('keyExample','valueExample').then(() => console.log('Value stored'))\n   * @since 1.6.0\n   */\n  setItem(key, value) {\n    return new Promise((resolve, reject) => {\n      this.storageEventProcessor.execute(resolve, reject, 'setItem', {\n        key,\n        value\n      });\n    });\n  }\n\n  /**\n   * Retrieves an item for a specific key.\n   * @memberof storageManager\n   * @param {string} key used to identify the value\n   * @returns {Promise<Object>} resolves an item retrieved from storage. It will launch an error if storage is not supported.\n   * @example\n   * LuigiClient.storageManager().getItem('keyExample').then((value) => console.log);\n   * @since 1.6.0\n   */\n  getItem(key) {\n    return new Promise((resolve, reject) => {\n      this.storageEventProcessor.execute(resolve, reject, 'getItem', { key });\n    });\n  }\n\n  /**\n   * Removes an item for a specific key.\n   * @memberof storageManager\n   * @param {string} key used to identify the value\n   * @returns {Promise<Object>} resolves an item just removed from storage. It will launch an error if storage is not supported or if you are using a Luigi reserved key.\n   * @example\n   * LuigiClient.storageManager().removeItem('keyExample').then((value) => console.log(value + ' just removed')\n   * @since 1.6.0\n   */\n  removeItem(key) {\n    return new Promise((resolve, reject) => {\n      this.storageEventProcessor.execute(resolve, reject, 'removeItem', {\n        key\n      });\n    });\n  }\n\n  /**\n   * Clears all the storage key/values.\n   * @memberof storageManager\n   * @returns {Promise<void>} resolves when storage clear is over.\n   * @example\n   * LuigiClient.storageManager().clear().then(() => console.log('storage cleared'))\n   * @since 1.6.0\n   */\n  clear() {\n    return new Promise((resolve, reject) => {\n      this.storageEventProcessor.execute(resolve, reject, 'clear', {});\n    });\n  }\n\n  /**\n   * Checks if a key is present in storage.\n   * @memberof storageManager\n   * @param {string} key key in the storage\n   * @returns {Promise<boolean>} `true` if key is present, `false` if it is not\n   * @example\n   * LuigiClient.storageManager().has(key).then((present) => console.log('item is present '+present))\n   * @since 1.6.0\n   */\n  has(key) {\n    return new Promise((resolve, reject) => {\n      this.storageEventProcessor.execute(resolve, reject, 'has', { key });\n    });\n  }\n\n  /**\n   * Gets all the keys used in the storage.\n   * @memberof storageManager\n   * @returns {Promise<string[]>} keys currently present in the storage\n   * @example\n   * LuigiClient.storageManager().getAllKeys().then((keys) => console.log('keys are '+keys))\n   * @since 1.6.0\n   */\n  getAllKeys() {\n    return new Promise((resolve, reject) => {\n      this.storageEventProcessor.execute(resolve, reject, 'getAllKeys', {});\n    });\n  }\n}\n\nclass StorageEventProcessor {\n  processEvent(evt, listenerId) {\n    try {\n      const data = evt.data.data;\n      if (!pendingOperation.has(data.id)) {\n        console.log('Impossible to find Promise method for message ' + data.id);\n        return;\n      }\n      const promiseOperations = pendingOperation.get(data.id);\n      if (data.status === 'ERROR') {\n        promiseOperations.reject(data.result);\n      } else {\n        promiseOperations.resolve(data.result);\n      }\n      pendingOperation.delete(data.id);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  waitForSyncResult(id) {\n    let start = new Date().getTime();\n    while (!syncOperation.has(id)) {\n      let exec = new Date().getTime() - start;\n      if (exec > 10000) {\n        throw 'Storage operation is taking more than 1 second...Some problem with Luigi Core communication';\n      }\n    }\n    const result = syncOperation.get(id);\n    pendingOperation.delete(id);\n    return result;\n  }\n\n  execute(resolve, reject, operation, params) {\n    let id = helpers.getRandomId();\n    this.createPendingOperation(id, resolve, reject);\n    this.sendMessage(id, operation, params);\n  }\n\n  createPendingOperation(id, resolve, reject) {\n    pendingOperation.set(id, {\n      resolve,\n      reject\n    });\n  }\n  sendMessage(id, operation, params) {\n    helpers.sendPostMessageToLuigiCore({\n      msg: 'storage',\n      data: {\n        id,\n        operation,\n        params\n      }\n    });\n  }\n}\n\nexport const storageManager = new StorageManager();\n","import { lifecycleManager } from './lifecycleManager';\nimport { linkManager } from './linkManager';\nimport { uxManager } from './uxManager';\nimport { storageManager } from './storageManager';\n\n/**\n * @name LuigiClient\n * @private\n */\nclass LuigiClient {\n  constructor() {\n    if (window !== window.top && window.document.head.getAttribute('disable-luigi-history-handling') != 'true') {\n      history.pushState = history.replaceState.bind(history);\n    }\n  }\n\n  addInitListener(initFn) {\n    return lifecycleManager.addInitListener(initFn);\n  }\n  removeInitListener(id) {\n    return lifecycleManager.removeInitListener(id);\n  }\n  addContextUpdateListener(contextUpdatedFn) {\n    return lifecycleManager.addContextUpdateListener(contextUpdatedFn);\n  }\n  removeContextUpdateListener(id) {\n    return lifecycleManager.removeContextUpdateListener(id);\n  }\n  getToken() {\n    return lifecycleManager.getToken();\n  }\n  getEventData() {\n    return lifecycleManager.getEventData();\n  }\n  getContext() {\n    return lifecycleManager.getContext();\n  }\n  getNodeParams() {\n    return lifecycleManager.getNodeParams();\n  }\n  getActiveFeatureToggles() {\n    return lifecycleManager.getActiveFeatureToggles();\n  }\n  getPathParams() {\n    return lifecycleManager.getPathParams();\n  }\n  getClientPermissions() {\n    return lifecycleManager.getClientPermissions();\n  }\n  sendCustomMessage(message) {\n    return lifecycleManager.sendCustomMessage(message);\n  }\n  addCustomMessageListener(messageId, listener) {\n    return lifecycleManager.addCustomMessageListener(messageId, listener);\n  }\n  removeCustomMessageListener(listenerId) {\n    return lifecycleManager.removeCustomMessageListener(listenerId);\n  }\n  addInactiveListener(messageId, listener) {\n    return lifecycleManager.addInactiveListener(messageId, listener);\n  }\n  removeInactiveListener(listenerId) {\n    return lifecycleManager.removeInactiveListener(listenerId);\n  }\n  setTargetOrigin(origin) {\n    return lifecycleManager.setTargetOrigin(origin);\n  }\n  getUserSettings() {\n    return lifecycleManager.getUserSettings();\n  }\n  isLuigiClientInitialized() {\n    return lifecycleManager.isLuigiClientInitialized();\n  }\n  luigiClientInit() {\n    return lifecycleManager.luigiClientInit();\n  }\n\n  /**\n   * @private\n   */\n  linkManager() {\n    return new linkManager({\n      currentContext: lifecycleManager.currentContext\n    });\n  }\n  /**\n   * @private\n   */\n  uxManager() {\n    return uxManager;\n  }\n  /**\n   * @private\n   */\n  lifecycleManager() {\n    return lifecycleManager;\n  }\n  /**\n   * @private\n   */\n  storageManager() {\n    return storageManager;\n  }\n}\nexport default LuigiClient = new LuigiClient();\n"],"sourceRoot":""}